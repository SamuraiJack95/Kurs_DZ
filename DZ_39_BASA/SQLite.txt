СУБД - Система Управления Базами Данных
SQL - язык структурированных запросов

Столбцы называют полями (атрибутами), они содержат информацию про свойства объекта

Строки называют записями(редко кортежами), они содержат значения конкретных свойств

SQLite 

SQLiteStudio
*.db, *.db3, *.sqlite, *.sqlite3


SELECT [ALL | DISTINCT] (*|столбец1 [, столбец_n])
FROM таблица1 [, таблица_n]
WHERE условие 
		AND, OR
		выражение [NOT] BETWEEN(начало AND конец)
		выражение [NOT] LIKE шаблон_строки
			% - любое количество любых символов
			_ - один любой символ
		выражение [NOT] GLOB регулярное_выражение
			* - любое количество любых символов
			? - соответствует любому одному символу
			. - соответствует любому одиночному символу
			[символы] - соответствует любому одиночному 
				символу из списка
			[начальный_символ-конечный_символ] - соответствует
				любому одиночному символу из 
				заданного диапазона [0-9]
			^ - этот символ используется в начале списка
				символов и соотвествует любому символу, который
				НЕ входит в список [^0-9]
		IS [NOT] NULL - возвращает все вхождения, столбцы
			которых имеют значение NULL

		выражение [NOT] IN (набор значений, выражение)

		EXISTS (подзапрос) - проверяет, вернул ли что-то подзапрос или нет.

GROUP BY имя_столбца1 [имя_столбца_n,]
ORDER BY col_name | col_number [ASC | DESC]

HAVING col_name выражение (Используется для сравнения с агрегатными функциями)

ALTER TABLE имя_таблицы
[ADD | RENAME | DROP] COLUMN имя_столбца [выражение]

ALTER TABLE имя_таблицы
RENAME TO новое_имя

INSERT INTO имя_таблицы [столбец1 [, столбец_n]]
VALUES (значение1, [, значение_n])

INSERT INTO имя_таблицы [список_столбцов]
SELECT список_столбцов
FROM список_таблиц
WHERE условие

UPDATE имя_таблицы
SET столбец1 = значение
[WHERE условие]

DELETE FROM имя_таблицы
[WHERE условие]


LIMIT кол-во_строк OFFSET смещение

LIMIT [смещение,] кол-во_строк

Функции агрегирования:
SUM - Сумма
AVG - Среднее арифметическое
COUNT - Количество
MIN - Минимальное значение
MAX - Максимальное значение


# SELECT *
# FROM table_name
# WHERE col_name = 
#     (SELECT col_name
#      FROM table_name_2
#      WHERE col_name_1 = value)

Однострочные подзапросы, как правило, используются вместе с [=, !=, >, >=, <=, <]
Так как они возвращают только 1 строку

Многострочные подзапросы используются с:
[IN, NOT IN]
Так как они возвращают более одной строки, список значений

Операторы BETWEEN, LIKE, IS NULL к подзапросам применять нельзя!

В самих подзапросах нельзя использовать ORDER BY и GROUP BY

UNION - используется для объединения двух и более SELECT
с исключением повторяющихся строк

FROM table_name_1 INNER JOIN table_name_2
ON связь_между_первичным_и_вторичным_ключами

JOIN, INNER JOIN - внутреннее объединение, включаются только те записи, которые имеют одинаковые значения в обоих объединенных таблицах

CROSS JOIN - внутреннее объединение, включается все комбинации 
всех строк. SELECT из нескольких таблиц работает как CROSS JOIN

FULL OUTER JOIN - внешнее объединение

LEFT JOIN - используется для создания левого внешнего объединения. С помощью него выбираются все записи левой таблицы, даже если они не соответствуют записям во второй таблице.

RIGHT JOIN - используется для создания правого внешнего объединения. С помощью него выбираются все записи второй таблицы, даже если они не соответствуют записям в первой таблице.
